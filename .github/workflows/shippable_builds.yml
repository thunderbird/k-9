---
name: Shippable Build & Signing
on:
  workflow_call:
  workflow_dispatch:
    inputs:
      skipThunderbird:
        type: boolean
        description: Skip building Thunderbird
      skipK9Mail:
        type: boolean
        description: Skip building K-9 Mail
      skipGooglePlay:
        type: boolean
        description: Skip Google Play Publish
      draftGooglePlay:
        type: boolean
        description: Don't send changes for review (Google Play)

jobs:
  get_environment:
    name: Determine Release Environment
    runs-on: ubuntu-latest
    outputs:
      releaseEnv: ${{ steps.releaseEnv.outputs.result }}
    steps:
      - uses: actions/github-script@v7
        id: releaseEnv
        with:
          result-encoding: string
          script: |
            const RELEASE_ENVS = {
              "refs/heads/main": "thunderbird_daily",
              "refs/heads/beta": "thunderbird_beta",
              "refs/heads/release": "thunderbird_release",
            };

            if (context.ref in RELEASE_ENVS) {
              return RELEASE_ENVS[context.ref];
            } else {
              core.setFailed(`Unknown branch ${context.ref} for shippable builds!`)
              return "";
            }

  dump_config:
    name: Show Release Environment
    runs-on: ubuntu-latest
    needs: get_environment
    environment: ${{ needs.get_environment.outputs.releaseEnv }}
    outputs:
      matrixInclude: ${{ steps.dump.outputs.matrixInclude }}
      releaseType: ${{ vars.RELEASE_TYPE }}
    steps:
      - name: Show Environment
        uses: actions/github-script@v7
        id: dump
        env:
          matrixInclude: ${{ vars.MATRIX_INCLUDE }}
          releaseType: ${{ vars.RELEASE_TYPE }}
          skipThunderbird: ${{ github.event.inputs.skipThunderbird }}
          skipK9Mail: ${{ github.event.inputs.skipK9Mail }}
        with:
          script: |
            let matrix = JSON.parse(process.env.matrixInclude);
            let skipThunderbird = process.env.skipThunderbird == "true";
            let skipK9Mail = process.env.skipK9Mail == "true";

            if (!matrix.every(item => !!item.appName && !!item.packageFormat)) {
              core.setFailed("MATRIX_INCLUDE is missing appName or packageFormat");
            }

            let matrixFull = matrix.filter(item => {
              return !((item.appName == "k9mail" && skipK9Mail) ||
                       (item.appName == "thunderbird" && skipThunderbird));
            });

            if (!matrixFull.length) {
              core.setFailed("There are no builds to run");
              return;
            }

            core.setOutput("matrixInclude", matrixFull);

            await core.summary
              .addRaw(`Beginning a <b>${process.env.releaseType}</b> build with the following configurations:`, true)
              .addTable([
                [
                  { data: "App Name", header: true },
                  { data: "Flavor", header: true },
                  { data: "Format", header: true },
                ],
                ...matrixFull.map(item => [
                  { data: item.appName },
                  { data: item.packageFlavor || "default" },
                  { data: item.packageFormat },
                ])
              ])
              .write();

              if (skipThunderbird) {
                await core.summary.addList(["Thunderbird is being skipped in this build"]).write();
              }

              if (skipK9Mail) {
                await core.summary.addList(["K-9 Mail is being skipped in this build"]).write();
              }

  build_unsigned:
    name: Build Unsigned
    runs-on: ubuntu-latest
    timeout-minutes: 90
    needs: [dump_config, get_environment]
    strategy:
      matrix:
        include: "${{ fromJSON(needs.dump_config.outputs.matrixInclude) }}"
    environment: ${{ needs.get_environment.outputs.releaseEnv }}
    steps:
      - uses: actions/checkout@v4

      - name: Copy CI gradle.properties
        shell: bash
        run: mkdir -p ~/.gradle ; cp .github/ci-gradle.properties ~/.gradle/gradle.properties

      - uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 17

      - name: Setup Gradle
        uses: gradle/actions/setup-gradle@v4
        with:
          cache-disabled: ${{ needs.dump_config.outputs.releaseType == 'beta' || needs.dump_config.outputs.releaseType == 'release' }}

      - name: Build It
        shell: bash
        env:
          PACKAGE_FORMAT: ${{ matrix.packageFormat }}
          PACKAGE_FLAVOR: ${{ matrix.packageFlavor }}
          APP_NAME: ${{ matrix.appName }}
          RELEASE_TYPE: ${{ vars.RELEASE_TYPE }}
        run: |
          if [[ "$APP_NAME" = "thunderbird" && "$PACKAGE_FORMAT" = "apk" ]]; then
            BUILD_COMMAND="assemble${PACKAGE_FLAVOR^}${RELEASE_TYPE^}"
          elif [[ "$APP_NAME" = "thunderbird" && "${PACKAGE_FORMAT}" = "aab" ]]; then
            BUILD_COMMAND="bundle${PACKAGE_FLAVOR^}${RELEASE_TYPE^}"
          elif [[ "$APP_NAME" = "k9mail" ]]; then
            BUILD_COMMAND="assembleRelease"
          fi

          echo "BUILDING: :app-${APP_NAME}:${BUILD_COMMAND}"
          ./gradlew clean :app-${APP_NAME}:${BUILD_COMMAND} --no-build-cache --no-configuration-cache
          echo "Status: $?"

      - name: Move apps to upload directory
        shell: bash
        env:
          PACKAGE_FORMAT: ${{ matrix.packageFormat }}
          PACKAGE_FLAVOR: ${{ matrix.packageFlavor }}
          APP_NAME: ${{ matrix.appName }}
          RELEASE_TYPE: ${{ vars.RELEASE_TYPE }}
          UPLOAD_PATH: "uploads"
        run: |
          OUT_BASE=app-${APP_NAME}/build/outputs/

          if [[ "$APP_NAME" = "thunderbird" && "$PACKAGE_FORMAT" = "apk" ]]; then
            OUT_PATH="${OUT_BASE}/apk/${PACKAGE_FLAVOR}/${RELEASE_TYPE}"
            OUT_FILE="app-${APP_NAME}-${PACKAGE_FLAVOR}-${RELEASE_TYPE}-unsigned.apk"
            UPLOAD_FILE="${APP_NAME}-${PACKAGE_FLAVOR}-${RELEASE_TYPE}.apk"
          elif [[ "$APP_NAME" = "thunderbird" && "${PACKAGE_FORMAT}" = "aab" ]]; then
            OUT_PATH="${OUT_BASE}/bundle/${PACKAGE_FLAVOR}${RELEASE_TYPE^}"
            OUT_FILE="app-${APP_NAME}-${PACKAGE_FLAVOR}-${RELEASE_TYPE}.aab"
            UPLOAD_FILE="${APP_NAME}-${PACKAGE_FLAVOR}-${RELEASE_TYPE}.aab"
          elif [[ "$APP_NAME" = "k9mail" ]]; then
            OUT_PATH="${OUT_BASE}/apk/release"
            OUT_FILE="app-${APP_NAME}-release-unsigned.apk"
            UPLOAD_FILE="${APP_NAME}-default-${RELEASE_TYPE}.apk"
          else
            echo "PACKAGE_FORMAT $PACKAGE_FORMAT is unknown. Exiting."
            exit 23
          fi

          mkdir -p "${UPLOAD_PATH}"

          if [[ -f "${OUT_PATH}/${OUT_FILE}" ]]; then
            mv -f "${OUT_PATH}/${OUT_FILE}" "${UPLOAD_PATH}/${UPLOAD_FILE}"
          else
            echo "Build file ${OUT_PATH}/${OUT_FILE} not found. Exiting."
            ls -l ${OUT_PATH}
            exit 24
          fi
          echo "Upload contents:"
          ls -l ${UPLOAD_PATH}/

      - name: Upload unsigned
        uses: actions/upload-artifact@v4
        env:
          UPLOAD_PATH: "uploads"
        with:
          name: unsigned-${{ matrix.appName }}-${{ matrix.packageFormat }}-${{ matrix.packageFlavor || 'default' }}
          path: ${{ env.UPLOAD_PATH }}/
          if-no-files-found: error

  sign_mobile:
    name: Sign Packages
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include: "${{ fromJSON(needs.dump_config.outputs.matrixInclude) }}"
    environment: ${{ matrix.appName }}_${{ needs.dump_config.outputs.releaseType }}_${{ matrix.packageFlavor || 'default' }}
    needs: [build_unsigned, dump_config]
    env:
      RELEASE_TYPE: ${{ needs.dump_config.outputs.releaseType }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: unsigned-${{ matrix.appName }}-${{ matrix.packageFormat }}-${{ matrix.packageFlavor || 'default' }}
          path: uploads/

      - uses: noriban/sign-android-release@5f144321d3c7c2233266e78b42360345d8bbe403   # v5.1
        name: Sign package
        with:
          releaseDirectory: uploads/
          signingKeyBase64: ${{ secrets.SIGNING_KEY }}
          alias: ${{ secrets.KEY_ALIAS }}
          keyPassword: ${{ secrets.KEY_PASSWORD }}
          keyStorePassword: ${{ secrets.KEY_STORE_PASSWORD }}

      - name: Rename assets
        if: ${{ matrix.packageFormat == 'apk' }}
        env:
          APP_NAME: ${{ matrix.appName }}
          PACKAGE_FLAVOR: ${{ matrix.packageFlavor || 'default' }}
        run: |
          mv uploads/${APP_NAME}-${PACKAGE_FLAVOR}-${RELEASE_TYPE}-signed.apk uploads/${APP_NAME}-${PACKAGE_FLAVOR}-${RELEASE_TYPE}.apk
          rm uploads/*-aligned.apk

      - name: Remove JKS file
        shell: bash
        run: |
          rm -f uploads/*.jks

      - name: Upload signed
        uses: actions/upload-artifact@v4
        with:
          name: signed-${{ matrix.appName }}-${{ matrix.packageFormat }}-${{ matrix.packageFlavor || 'default' }}
          if-no-files-found: error
          path: |
            uploads/*.apk
            uploads/*.aab

  pre_publish:
    # This is a holding job meant to require approval before proceeding with the publishing jobs below
    # The environment has a deployment protection rule requiring approval from a set of named reviewers
    # before proceeding.
    name: Wait for Approval
    needs: [dump_config, sign_mobile]
    if: ${{ needs.dump_config.outputs.releaseType == 'beta' || needs.dump_config.outputs.releaseType == 'release' }}
    environment: publish_hold
    runs-on: ubuntu-latest
    steps:
      - name: Approval
        shell: bash
        run: |
          true

  publish_release:
    name: Publish Release
    needs: [pre_publish, dump_config]
    if: ${{ !failure() && !cancelled() }} # Run if previous step is skipped
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include: "${{ fromJSON(needs.dump_config.outputs.matrixInclude) }}"
    environment: publish_release
    env:
      RELEASE_TYPE: ${{ needs.dump_config.outputs.releaseType }}
      APP_NAME: ${{ matrix.appName }}
      PACKAGE_FLAVOR: ${{ matrix.packageFlavor || 'default' }}
      PACKAGE_FORMAT: ${{ matrix.packageFormat }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: signed-${{ matrix.appName }}-${{ matrix.packageFormat }}-${{ matrix.packageFlavor || 'default' }}
          path: "uploads/"

      - name: Get Package Info
        id: pkginfo
        shell: bash
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          PKG_FILE="uploads/${APP_NAME}-${PACKAGE_FLAVOR}-${RELEASE_TYPE}.${PACKAGE_FORMAT}"
          if [[ "${PACKAGE_FORMAT}" == "apk" ]]; then
            LATEST_BUILD_TOOLS=$(ls -d ${ANDROID_SDK_ROOT}/build-tools/* | sort -V | tail -n1)
            AAPT=${LATEST_BUILD_TOOLS}/aapt

            NAME=$(${AAPT} dump badging $PKG_FILE | sed -n "s/^application-label:'\([^']*\)'.*$/\1/p")
            VERSION=$(${AAPT} dump badging $PKG_FILE | sed -n "s/^package:.*versionName='\([^']*\)'.*$/\1/p")
            PACKAGE_ID=$(${AAPT} dump badging $PKG_FILE | sed -n "s/^package: name='\([^']*\)'.*$/\1/p")
          elif [[ "${PACKAGE_FORMAT}" == "aab" ]]; then
            if [ ! -f bundletool.jar ]; then
              gh release download -R google/bundletool -p 'bundletool-all-*.jar' -O bundletool.jar
            fi
            BUNDLETOOL="java -jar bundletool.jar"

            VERSION=$(${BUNDLETOOL} dump manifest --bundle ${PKG_FILE} --xpath '/manifest/@android:versionName')
            PACKAGE_ID=$(${BUNDLETOOL} dump manifest --bundle ${PKG_FILE} --xpath '/manifest/@package')

            # Unfortunately no application label in the bundle
            case "$PACKAGE_ID" in
              net.thunderbird.android) NAME="Thunderbird" ;;
              net.thunderbird.android.beta) NAME="Thunderbird Beta" ;;
              net.thunderbird.android.daily) NAME="Thunderbird Daily" ;;
              wtf.says.test) NAME="Test" ;;
              com.fsck.k9) NAME="K-9 Mail" ;;
            esac
          fi

          echo "TAG_NAME=${APP_NAME^^}_${VERSION//./_}" >> $GITHUB_OUTPUT
          echo "FULL_VERSION_NAME=${NAME} ${VERSION}" >> $GITHUB_OUTPUT
          echo "VERSION_NAME=${VERSION}" >> $GITHUB_OUTPUT
          echo "PACKAGE_ID=${PACKAGE_ID}" >> $GITHUB_OUTPUT

          cat $GITHUB_OUTPUT

      - name: Rename release assets
        id: rename
        shell: bash
        env:
          VERSION_NAME: ${{ steps.pkginfo.outputs.VERSION_NAME }}
        run: |
          PKG_FILE="${APP_NAME}-${PACKAGE_FLAVOR}-${RELEASE_TYPE}.${PACKAGE_FORMAT}"
          PKG_FILE_PRETTY="${APP_NAME}-${VERSION_NAME}.${PACKAGE_FORMAT}"
          mv uploads/${PKG_FILE} uploads/${PKG_FILE_PRETTY}

          echo "PKG_FILE=${PKG_FILE_PRETTY}" >> $GITHUB_OUTPUT
          ls -l uploads/${PKG_FILE_PRETTY}

      - name: App Token Generate
        uses: actions/create-github-app-token@v1
        if: ${{ contains(matrix.releaseTarget, 'github') && vars.RELEASER_APP_CLIENT_ID }}
        id: app-token
        with:
          app-id: ${{ vars.RELEASER_APP_CLIENT_ID }}
          private-key: ${{ secrets.RELEASER_APP_PRIVATE_KEY }}

      - name: Publish to GitHub Releases
        id: publish_gh
        if: ${{ contains(matrix.releaseTarget, 'github') }}
        uses: softprops/action-gh-release@c062e08bd532815e2082a85e87e3ef29c3e6d191  # v2.0.8
        with:
          token: ${{ steps.app-token.outputs.token || github.token }}
          target_commitish: ${{ github.sha }}
          tag_name: ${{ steps.pkginfo.outputs.TAG_NAME }}
          name: ${{ steps.pkginfo.outputs.FULL_VERSION_NAME }}
          prerelease: ${{ env.RELEASE_TYPE != 'release' }}
          fail_on_unmatched_files: true
          files: |
            uploads/${{ steps.rename.outputs.PKG_FILE }}

      - name: Publish to Google Play
        id: publish_play
        uses: r0adkll/upload-google-play@v1
        if: ${{ github.events.inputs.skipGooglePlay != 'true' && contains(matrix.releaseTarget, 'play') && matrix.playTargetTrack }}
        with:
          serviceAccountJsonPlainText: ${{ secrets.PLAY_STORE_ACCOUNT }}
          packageName: ${{ steps.pkginfo.outputs.PACKAGE_ID }}
          track: ${{ matrix.playTargetTrack }}
          releaseName: ${{ steps.pkginfo.outputs.VERSION_NAME }}
          status: completed
          changesNotSentForReview: ${{ github.event.inputs.draftGooglePlay == 'true' }}
          #whatsNewDirectory: TODO
          releaseFiles: |
            uploads/${{ steps.rename.outputs.PKG_FILE }}

      - name: Summary
        uses: actions/github-script@v7
        env:
          tagName: ${{ steps.pkginfo.outputs.TAG_NAME }}
          fullVersionName: ${{ steps.pkginfo.outputs.FULL_VERSION_NAME }}
          ghReleaseUrl: ${{ steps.publish_gh.outputs.url }}
          playTargetTrack: ${{ matrix.playTargetTrack }}
          packageId: ${{ steps.pkginfo.outputs.PACKAGE_ID }}
        with:
          script: |
            await core.summary
              .addHeading(`${process.env.fullVersionName} (${process.env.packageId})`)
              .addRaw(`Tag ${process.env.tagName} at `)
              .addLink(context.sha, `${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/commit/${context.sha}`)
              .addEOL()
              .write();

            if (process.env.ghReleaseUrl) {
              await core.summary
                .addRaw(`Released to Github at `)
                .addLink(process.env.ghReleaseUrl, process.env.ghReleaseUrl)
                .addEOL()
                .write();
            }

            if (process.env.playTargetTrack) {
              await core.summary.addRaw(`Released to the <b>${process.env.playTargetTrack}</b> track on Google Play`, true).write();
            }
